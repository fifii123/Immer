import { NextRequest, NextResponse } from 'next/server';
import Pool from '@/lib/db';
import { OpenAI } from 'openai';

// Inicjalizacja klienta OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

export async function POST(request: NextRequest) {
  try {
    // Pobierz dane z ciała zapytania
    const body = await request.json();
    const { testId, userId, questions, answers } = body;
    
    if (!testId || !userId || !questions || !answers || !Array.isArray(questions) || !Array.isArray(answers)) {
      return NextResponse.json(
        { error: 'Missing or invalid required parameters' }, 
        { status: 400 }
      );
    }
    
    // Sprawdź, czy test istnieje
    const testResult = await Pool.query(
      `SELECT test_id, question_type FROM tests WHERE test_id = $1`,
      [testId]
    );
    
    if (testResult.rows.length === 0) {
      return NextResponse.json({ error: 'Test not found' }, { status: 404 });
    }
    
    const { question_type } = testResult.rows[0];
    
    // Upewnij się, że sprawdzamy odpowiedzi na pytania otwarte
    if (question_type !== 'open_ended') {
      return NextResponse.json(
        { error: 'This endpoint is for checking open-ended questions only' }, 
        { status: 400 }
      );
    }
    
    // Sprawdź odpowiedzi za pomocą AI
    const feedback = await checkAnswersWithAI(questions, answers);
    
    // Oblicz wynik
    const correctAnswers = feedback.filter(item => item.isCorrect).length;
    const score = Math.round((correctAnswers / questions.length) * 100);
    
    return NextResponse.json({
      feedback,
      score,
      correctAnswers,
      totalQuestions: questions.length
    });
  } catch (error) {
    console.error('Error checking answers:', error);
    return NextResponse.json(
      { error: 'Failed to check answers' }, 
      { status: 500 }
    );
  }
}

// Funkcja do sprawdzania odpowiedzi przy użyciu AI
async function checkAnswersWithAI(
    questions: Array<{
      question: string;
      context?: string;
      correctAnswer: string;
    }>,
    userAnswers: string[]
  ): Promise<Array<{
    isCorrect: boolean;
    feedback: string;
    correctAnswer?: string;
  }>> {
    // Przygotuj dane do oceny
    const evaluationData = questions.map((q, index) => ({
      question: q.question,
      context: q.context || '',
      correctAnswer: q.correctAnswer,
      userAnswer: userAnswers[index] || ''
    }));
    
    // Przygotuj prompt dla AI
    const prompt = `Oceń poniższe odpowiedzi na pytania otwarte.
    
  Dla każdego pytania:
  1. Określ, czy odpowiedź użytkownika jest poprawna (true) lub wymaga poprawy (false).
  2. Podaj konstruktywną informację zwrotną na temat odpowiedzi.
  3. Jeśli odpowiedź nie jest poprawna, podaj wzorcową odpowiedź.
  
  Oceniaj odpowiedzi liberalnie - jeśli odpowiedź użytkownika zawiera kluczowe koncepcje i wykazuje zrozumienie tematu, 
  uznaj ją za poprawną, nawet jeśli nie jest identyczna z wzorcową odpowiedzią.
  
  Kryteria oceny:
  - Poprawna odpowiedź (true): Użytkownik wykazał zrozumienie tematu i ujął wszystkie lub większość kluczowych punktów.
  - Odpowiedź do poprawy (false): Użytkownik pominął kluczowe informacje, przedstawił nieprawidłowe informacje lub odpowiedź jest niekompletna.
  
  Pytania i odpowiedzi do oceny:
  ${JSON.stringify(evaluationData, null, 2)}
  
  Zwróć odpowiedź w formacie JSON z następującą strukturą:
  {
    "results": [
      {
        "isCorrect": true/false,
        "feedback": "Konstruktywna informacja zwrotna",
        "correctAnswer": "Wzorcowa odpowiedź (tylko gdy isCorrect = false)"
      },
      ...
    ]
  }`;
  
    try {
      // Wywołaj API OpenAI
      const response = await openai.chat.completions.create({
        model: "gpt-4-1106-preview", // lub inny dostępny model
        messages: [
          { 
            role: "system", 
            content: "Jesteś ekspertem w ocenianiu odpowiedzi na pytania otwarte. Twoje zadanie to rzetelna ocena odpowiedzi i dostarczenie konstruktywnej informacji zwrotnej."
          },
          { role: "user", content: prompt }
        ],
        temperature: 0.3, // Niższa temperatura dla bardziej przewidywalnych wyników
        response_format: { type: "json_object" }
      });
      
      const content = response.choices[0].message.content;
      
      // Walidacja wyniku
      if (!content) {
        throw new Error('No content generated by AI');
      }
      
      // Parsuj i waliduj strukturę JSON
      const parsedContent = JSON.parse(content);
      
      // Sprawdź czy odpowiedź zawiera pole 'results' które jest tablicą
      if (!parsedContent.results || !Array.isArray(parsedContent.results)) {
        console.error('Unexpected AI response structure:', parsedContent);
        throw new Error('Invalid response format from AI');
      }
      
      return parsedContent.results;
    } catch (error) {
      console.error('Error checking answers with AI:', error);
      
      // Zwróć domyślną odpowiedź w przypadku błędu
      return evaluationData.map(item => ({
        isCorrect: false,
        feedback: "Nie udało się ocenić tej odpowiedzi. Spróbuj ponownie później.",
        correctAnswer: item.correctAnswer
      }));
    }
  }