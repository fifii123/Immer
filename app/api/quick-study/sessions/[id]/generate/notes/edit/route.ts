// app/api/quick-study/sessions/[id]/generate/notes/edit/route.ts
import { NextRequest } from 'next/server'
import { OpenAI } from 'openai'


const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
})


export async function POST(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const body = await request.json()
    
    const { 
      operation, 
      content, 
      context 
    }: {
      operation: 'expand' | 'improve' | 'simplify'
      content: string
      context?: string
    } = body

    // Walidacja
    if (!operation || !content) {
      return Response.json(
        { error: 'Missing required parameters: operation, content' },
        { status: 400 }
      )
    }

    console.log(`üîÑ Processing ${operation} operation for session ${params.id}`)

    // Przygotuj prompt w zale≈ºno≈õci od operacji
    const systemPrompt = `Jeste≈õ ekspertem w przetwarzaniu tre≈õci edukacyjnych. 
Wykonuj operacje precyzyjnie, zachowujƒÖc akademicki poziom i u≈ºywajƒÖc formatowania Markdown.

FORMATOWANIE:
- U≈ºywaj **pogrubienia** dla kluczowych termin√≥w
- U≈ºywaj *kursywy* dla podkre≈õle≈Ñ  
- U≈ºywaj nag≈Ç√≥wk√≥w ## i ### dla struktury
- U≈ºywaj list punktowanych (-) i numerowanych (1.)
- U≈ºywaj \`kod\` dla termin√≥w technicznych
- U≈ºywaj > dla cytat√≥w i definicji

Odpowiadaj zawsze w jƒôzyku polskim.`

    let userPrompt = ''
    
    switch (operation) {
      case 'expand':
        userPrompt = `Rozwi≈Ñ poni≈ºszy fragment tekstu, dodajƒÖc wiƒôcej szczeg√≥≈Ç√≥w, przyk≈Çad√≥w i wyja≈õnie≈Ñ. Zachowaj oryginalny ton i styl.

ORYGINALNY TEKST:
${content}

${context ? `\nKONTEKST:\n${context}` : ''}

INSTRUKCJE:
- Dodaj konkretne przyk≈Çady i szczeg√≥≈Çy
- Wyja≈õnij kluczowe koncepcje g≈Çƒôbiej
- Zachowaj sp√≥jno≈õƒá z oryginalnym tekstem
- U≈ºyj formatowania Markdown dla lepszej czytelno≈õci
- Rozwi≈Ñ ka≈ºdy punkt o dodatkowe informacje`
        break

      case 'improve':
        userPrompt = `Ulepsz poni≈ºszy fragment tekstu, poprawiajƒÖc jego klarowno≈õƒá, precyzjƒô i jako≈õƒá przekazu.

ORYGINALNY TEKST:
${content}

${context ? `\nKONTEKST:\n${context}` : ''}

INSTRUKCJE:
- Popraw jasno≈õƒá i precyzjƒô wyra≈ºania
- Zoptymalizuj strukturƒô i przep≈Çyw tekstu
- Usu≈Ñ redundancje i niepotrzebne s≈Çowa
- Wzmocnij kluczowe punkty
- Zachowaj oryginalny sens i intencjƒô`
        break

      case 'simplify':
        userPrompt = `Upro≈õƒá poni≈ºszy fragment tekstu, czyniƒÖc go bardziej przystƒôpnym i ≈Çatwym do zrozumienia.

ORYGINALNY TEKST:
${content}

${context ? `\nKONTEKST:\n${context}` : ''}

INSTRUKCJE:
- U≈ºyj prostszego jƒôzyka i kr√≥tszych zda≈Ñ
- Wyja≈õnij trudne terminy
- Rozbij z≈Ço≈ºone koncepcje na prostsze czƒô≈õci
- Zachowaj wszystkie kluczowe informacje
- Dodaj przyk≈Çady u≈ÇatwiajƒÖce zrozumienie`
        break

      default:
        return Response.json(
          { error: 'Invalid operation type' },
          { status: 400 }
        )
    }

    // Stw√≥rz streaming response
    const stream = new ReadableStream({
      async start(controller) {
        try {
          const completion = await openai.chat.completions.create({
            model: "gpt-4o",
            messages: [
              { role: 'system', content: systemPrompt },
              { role: 'user', content: userPrompt }
            ],
            temperature: 0.7,
            max_tokens: 2000,
            stream: true
          })

          let fullResponse = ''

          for await (const chunk of completion) {
            const content = chunk.choices[0]?.delta?.content || ''
            
            if (content) {
              fullResponse += content
              
              const data = JSON.stringify({ 
                type: 'chunk', 
                content: content,
                operation: operation
              })
              controller.enqueue(new TextEncoder().encode(`data: ${data}\n\n`))
            }
          }

          // Zako≈Ñczenie
          const completeData = JSON.stringify({ 
            type: 'complete', 
            fullContent: fullResponse,
            operation: operation
          })
          controller.enqueue(new TextEncoder().encode(`data: ${completeData}\n\n`))
          controller.close()

          console.log(`‚úÖ ${operation} operation completed successfully`)

        } catch (error) {
          console.error('‚ùå Error in edit operation:', error)
          
          const errorData = JSON.stringify({ 
            type: 'error', 
            message: 'Failed to process content',
            details: error instanceof Error ? error.message : 'Unknown error'
          })
          controller.enqueue(new TextEncoder().encode(`data: ${errorData}\n\n`))
          controller.close()
        }
      }
    })

    return new Response(stream, {
      headers: {
        'Content-Type': 'text/stream',
        'Cache-Control': 'no-cache',
        'Connection': 'keep-alive',
      },
    })

  } catch (error) {
    console.error('‚ùå Error in edit endpoint:', error)
    
    return Response.json(
      { error: 'Edit operation failed' },
      { status: 500 }
    )
  }
}